const bcryptjs = require('bcryptjs');
const {User} = require('../models/user');
const express = require('express');
const mongoose = require('mongoose');
const Joi = require('joi');
const router = express.Router();

router.post('/', async(req,res) => {
    const {error} = validate(req.body);
    if(error){
        return res.status(400).send(error.details[0].message);
    }

    let user = await User.findOne( {email : req.body.email} );
    if(!user) res.status(404).send('user not registered!!');

    const isValidPassword = await bcryptjs.compare(req.body.password,user.password);
    if(!isValidPassword) res.status(400).send('incorrect password!!');

    const token = user.generateAuthToken();
    res.header('x-auth-token',token).send('logged in successfully');
});


function validate(req){
    const schema = {
        email : Joi.string().min(5).max(255).email().required(),
        password : Joi.string().min(5).max(255).required()
    }
    return Joi.validate(req,schema);
}

module.exports = router;

/*
JSON Web token is a long string that identifies the user
it's basically like a token given to client that logged in generated by the server
the next time it requests any call to api
client has to show it's json web token
in web, jwt is stored in local storage which is a special storage place available to every browser

the encoded json web token is in 3 parts and each part is color coded:

1. red:
Header
  -algorithm
  -type 

2. purple:
payload
includes public properties of user like name, dob, etc.
we can get the userid from the payload itself, no need to query the database
    -sub (userid)
    -name
    -admin

    iat : time at which token was created


3. blue:
digital signature
created based on content of jwt along with secret/private key, available on server only.
thus no one can modify the contents of jwt

never store a token on the server, store them on client
token is a key for accessing the private endpoints
if server gets hacked, all the data is taken away
no need of even password, one can send the users token in the header
and get access to all the data or even update it on behalf of user

to store token in db due to some reasons, make sure to hash it like passwords

and when sending token from client to server
make sure to use https
otherwise someone else sniffing the network can get the token
with https, data is encrypted between client and server
*/